const { db } = require('../database/init');

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
function getCurrentDate() {
  return new Date().toISOString().split('T')[0]; // YYYY-MM-DD
}

function getCurrentTime() {
  const now = new Date();
  return now.toTimeString().slice(0, 5); // HH:MM
}

function formatDateForDisplay(dateStr) {
  const date = new Date(dateStr + 'T00:00:00');
  const today = new Date();
  const yesterday = new Date(today);
  yesterday.setDate(yesterday.getDate() - 1);

  if (dateStr === today.toISOString().split('T')[0]) {
    return '–°–µ–≥–æ–¥–Ω—è';
  } else if (dateStr === yesterday.toISOString().split('T')[0]) {
    return '–í—á–µ—Ä–∞';
  } else {
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
  }
}

// Prepared statements –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ
let statements = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ prepared statements
function initStatements() {
  statements = {
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–Ω–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getAllDays: db.prepare(`
      SELECT
        d.date,
        d.display_date,
        COUNT(e.id) as entries_count,
        MAX(e.id) as last_entry_id
      FROM days d
      LEFT JOIN entries e ON d.date = e.date AND d.user_id = e.user_id
      WHERE d.user_id = ?
      GROUP BY d.date, d.display_date
      ORDER BY d.date DESC
    `),

    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è –¥–Ω—è
    getLastEntry: db.prepare(`
      SELECT id, time, text, created_at
      FROM entries
      WHERE id = ? AND user_id = ?
    `),

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getDayEntries: db.prepare(`
      SELECT id, time, text, created_at, updated_at
      FROM entries
      WHERE date = ? AND user_id = ?
      ORDER BY time ASC
    `),

    // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    upsertDay: db.prepare(`
      INSERT OR REPLACE INTO days (date, user_id, display_date)
      VALUES (?, ?, ?)
    `),

    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    insertEntry: db.prepare(`
      INSERT INTO entries (date, user_id, time, text)
      VALUES (?, ?, ?, ?)
    `),

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dayExists: db.prepare(`
      SELECT 1 FROM days WHERE date = ? AND user_id = ?
    `),

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getStats: db.prepare(`
      SELECT
        COUNT(DISTINCT date) as total_days,
        COUNT(*) as total_entries,
        MIN(date) as first_day,
        MAX(date) as last_day
      FROM entries
      WHERE user_id = ?
    `)
  };
}

class DiaryModel {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è prepared statements
  static init() {
    initStatements();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–Ω–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static getAllDays(userId) {
    try {
      if (!statements) this.init();
      const daysData = statements.getAllDays.all(userId);

      return daysData.map(day => {
        let lastEntry = null;

        if (day.last_entry_id) {
          lastEntry = statements.getLastEntry.get(day.last_entry_id, userId);
        }

        return {
          date: day.date,
          displayDate: formatDateForDisplay(day.date),
          entriesCount: day.entries_count,
          lastEntry: lastEntry ? {
            id: lastEntry.id,
            time: lastEntry.time,
            text: lastEntry.text,
            createdAt: lastEntry.created_at
          } : null
        };
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å —Å –∑–∞–ø–∏—Å—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static getDay(date, userId) {
    try {
      if (!statements) this.init();
      const entries = statements.getDayEntries.all(date, userId);

      return {
        date,
        displayDate: formatDateForDisplay(date),
        entries: entries.map(entry => ({
          id: entry.id,
          time: entry.time,
          text: entry.text,
          createdAt: entry.created_at,
          updatedAt: entry.updated_at
        }))
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω—è:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static getToday(userId) {
    try {
      const today = getCurrentDate();

      // –°–æ–∑–¥–∞–µ–º –¥–µ–Ω—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      this.ensureDayExists(today, userId);

      const dayData = this.getDay(today, userId);

      return {
        ...dayData,
        displayDate: '–°–µ–≥–æ–¥–Ω—è',
        currentTime: getCurrentTime()
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è:', error);
      throw error;
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static createTodayEntry(text, userId, time = null) {
    try {
      if (!statements) this.init();
      const today = getCurrentDate();
      const entryTime = time || getCurrentTime();

      // –°–æ–∑–¥–∞–µ–º –¥–µ–Ω—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      this.ensureDayExists(today, userId);

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
      const result = statements.insertEntry.run(today, userId, entryTime, text);

      return {
        id: result.lastInsertRowid,
        time: entryTime,
        text,
        createdAt: new Date().toISOString()
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
      throw error;
    }
  }

  // –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–µ–Ω—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static ensureDayExists(date, userId) {
    try {
      if (!statements) this.init();
      const exists = statements.dayExists.get(date, userId);

      if (!exists) {
        const displayDate = formatDateForDisplay(date);
        statements.upsertDay.run(date, userId, displayDate);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–Ω—è:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static getStatistics(userId) {
    try {
      if (!statements) this.init();
      const stats = statements.getStats.get(userId);

      return {
        totalDays: stats.total_days || 0,
        totalEntries: stats.total_entries || 0,
        firstDay: stats.first_day,
        lastDay: stats.last_day,
        averageEntriesPerDay: stats.total_days > 0 ?
          Math.round((stats.total_entries / stats.total_days) * 10) / 10 : 0
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
  static clearAllData() {
    try {
      db.prepare('DELETE FROM entries').run();
      db.prepare('DELETE FROM days').run();
      console.log('üóëÔ∏è  –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static exportToJSON(userId) {
    try {
      if (!statements) this.init();
      const days = statements.getAllDays.all(userId);
      const exportData = {};

      days.forEach(day => {
        const entries = statements.getDayEntries.all(day.date, userId);
        exportData[day.date] = entries;
      });

      return exportData;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }
}

module.exports = DiaryModel;
