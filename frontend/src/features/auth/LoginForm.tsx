import React, { useState } from 'react';
import { authApi, authUtils } from '../../shared/api/diary';
import { LoginRequest, AuthError } from '../../shared/api/types';
import './AuthForms.scss';

interface LoginFormProps {
  onSuccess?: () => void;
  onSwitchToRegister?: () => void;
}

export const LoginForm: React.FC<LoginFormProps> = ({ onSuccess, onSwitchToRegister }) => {
  const [formData, setFormData] = useState<LoginRequest>({
    email: '',
    password: '',
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string>('');
  const [showPassword, setShowPassword] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value,
    }));
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ
    if (error) setError('');
  };

  const validateForm = (): boolean => {
    if (!formData.email.trim()) {
      setError('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
      return false;
    }

    if (!formData.password.trim()) {
      setError('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
      return false;
    }

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) {
      setError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
      return false;
    }

    return true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) return;

    setIsLoading(true);
    setError('');

    try {
      const response = await authApi.login(formData);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      authUtils.saveAuthData(response);

      // –í—ã–∑—ã–≤–∞–µ–º callback —É—Å–ø–µ—Ö–∞
      if (onSuccess) {
        onSuccess();
      } else {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        window.location.href = '/';
      }
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', err);

      if (err.response?.data?.error) {
        setError(err.response.data.message || err.response.data.error);
      } else if (err.message) {
        setError(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${err.message}`);
      } else {
        setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="auth-form">
      <div className="auth-form__header">
        <h2 className="auth-form__title">–í—Ö–æ–¥ –≤ Shiori</h2>
        <p className="auth-form__subtitle">
          –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞
        </p>
      </div>

      <form onSubmit={handleSubmit} className="auth-form__form">
        {error && (
          <div className="auth-form__error" role="alert">
            <span className="auth-form__error-icon">‚ö†Ô∏è</span>
            <span className="auth-form__error-text">{error}</span>
          </div>
        )}

        <div className="auth-form__field">
          <label htmlFor="email" className="auth-form__label">
            Email –∞–¥—Ä–µ—Å
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            className="auth-form__input"
            placeholder="example@email.com"
            disabled={isLoading}
            required
            autoComplete="email"
            autoFocus
          />
        </div>

        <div className="auth-form__field">
          <label htmlFor="password" className="auth-form__label">
            –ü–∞—Ä–æ–ª—å
          </label>
          <div className="auth-form__password-wrapper">
            <input
              type={showPassword ? 'text' : 'password'}
              id="password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              className="auth-form__input"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              disabled={isLoading}
              required
              autoComplete="current-password"
              minLength={6}
            />
            <button
              type="button"
              className="auth-form__password-toggle"
              onClick={() => setShowPassword(!showPassword)}
              disabled={isLoading}
              aria-label={showPassword ? '–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å'}
            >
              {showPassword ? 'üôà' : 'üëÅÔ∏è'}
            </button>
          </div>
        </div>

        <button
          type="submit"
          className="auth-form__submit"
          disabled={isLoading}
        >
          {isLoading ? (
            <>
              <span className="auth-form__spinner" />
              –í—Ö–æ–¥...
            </>
          ) : (
            '–í–æ–π—Ç–∏'
          )}
        </button>
      </form>

      <div className="auth-form__footer">
        <p className="auth-form__switch">
          –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
          <button
            type="button"
            className="auth-form__switch-button"
            onClick={onSwitchToRegister}
            disabled={isLoading}
          >
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
          </button>
        </p>
      </div>
    </div>
  );
};
