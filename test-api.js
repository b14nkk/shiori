const http = require("http");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let body = "";
      res.on("data", (chunk) => {
        body += chunk;
      });
      res.on("end", () => {
        try {
          const result = {
            status: res.statusCode,
            headers: res.headers,
            data: body ? JSON.parse(body) : null,
          };
          resolve(result);
        } catch (e) {
          resolve({
            status: res.statusCode,
            headers: res.headers,
            data: body,
          });
        }
      });
    });

    req.on("error", (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
async function testAPI() {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...\n");

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑–æ–≤—ã–π endpoint
    console.log("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ endpoint...");
    const baseResponse = await makeRequest({
      hostname: "localhost",
      port: 3001,
      path: "/",
      method: "GET",
    });
    console.log(`–°—Ç–∞—Ç—É—Å: ${baseResponse.status}`);
    console.log(`–û—Ç–≤–µ—Ç: ${JSON.stringify(baseResponse.data, null, 2)}\n`);

    // 2. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
    console.log("2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫...");
    const notesResponse = await makeRequest({
      hostname: "localhost",
      port: 3001,
      path: "/api/notes",
      method: "GET",
    });
    console.log(`–°—Ç–∞—Ç—É—Å: ${notesResponse.status}`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫: ${notesResponse.data?.length || 0}`);
    console.log(`–ó–∞–º–µ—Ç–∫–∏: ${JSON.stringify(notesResponse.data, null, 2)}\n`);

    // 3. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
    console.log("3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏...");
    const newNote = {
      title: "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞",
      content: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è —á–µ—Ä–µ–∑ API",
    };
    const createResponse = await makeRequest(
      {
        hostname: "localhost",
        port: 3001,
        path: "/api/notes",
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      },
      newNote,
    );
    console.log(`–°—Ç–∞—Ç—É—Å: ${createResponse.status}`);
    console.log(
      `–°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: ${JSON.stringify(createResponse.data, null, 2)}\n`,
    );

    const createdNoteId = createResponse.data?.id;

    if (createdNoteId) {
      // 4. –ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ ID
      console.log("4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID...");
      const noteByIdResponse = await makeRequest({
        hostname: "localhost",
        port: 3001,
        path: `/api/notes/${createdNoteId}`,
        method: "GET",
      });
      console.log(`–°—Ç–∞—Ç—É—Å: ${noteByIdResponse.status}`);
      console.log(
        `–ó–∞–º–µ—Ç–∫–∞: ${JSON.stringify(noteByIdResponse.data, null, 2)}\n`,
      );

      // 5. –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
      console.log("5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏...");
      const updatedNote = {
        title: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞",
        content: "–≠—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞",
      };
      const updateResponse = await makeRequest(
        {
          hostname: "localhost",
          port: 3001,
          path: `/api/notes/${createdNoteId}`,
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
        },
        updatedNote,
      );
      console.log(`–°—Ç–∞—Ç—É—Å: ${updateResponse.status}`);
      console.log(
        `–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞: ${JSON.stringify(updateResponse.data, null, 2)}\n`,
      );

      // 6. –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
      console.log("6. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏...");
      const deleteResponse = await makeRequest({
        hostname: "localhost",
        port: 3001,
        path: `/api/notes/${createdNoteId}`,
        method: "DELETE",
      });
      console.log(`–°—Ç–∞—Ç—É—Å: ${deleteResponse.status}`);
      console.log(`–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞\n`);

      // 7. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞
      console.log("7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è...");
      const deletedNoteResponse = await makeRequest({
        hostname: "localhost",
        port: 3001,
        path: `/api/notes/${createdNoteId}`,
        method: "GET",
      });
      console.log(`–°—Ç–∞—Ç—É—Å: ${deletedNoteResponse.status}`);
      console.log(
        `–û—Ç–≤–µ—Ç: ${JSON.stringify(deletedNoteResponse.data, null, 2)}\n`,
      );
    }

    // 8. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
    console.log("8. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫...");
    const finalNotesResponse = await makeRequest({
      hostname: "localhost",
      port: 3001,
      path: "/api/notes",
      method: "GET",
    });
    console.log(`–°—Ç–∞—Ç—É—Å: ${finalNotesResponse.status}`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫: ${finalNotesResponse.data?.length || 0}`);
    console.log(
      `–ó–∞–º–µ—Ç–∫–∏: ${JSON.stringify(finalNotesResponse.data, null, 2)}\n`,
    );

    console.log("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:", error.message);
    if (error.code === "ECONNREFUSED") {
      console.error("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001");
      console.error("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd backend && npm run dev");
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testAPI();
